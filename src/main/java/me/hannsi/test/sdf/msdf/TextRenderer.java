package me.hannsi.test.sdf.msdf;

import me.hannsi.lfjg.core.Core;
import me.hannsi.lfjg.core.debug.DebugLog;
import me.hannsi.lfjg.core.utils.reflection.location.Location;
import me.hannsi.lfjg.render.system.rendering.GLStateCache;
import me.hannsi.lfjg.render.system.rendering.VAORendering;
import me.hannsi.lfjg.render.system.shader.ShaderProgram;
import me.hannsi.lfjg.render.system.shader.UploadUniformType;
import org.joml.Matrix4f;
import org.joml.Vector2f;
import org.joml.Vector3f;

import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL13.GL_TEXTURE0;

public class TextRenderer {
    protected ShaderProgram shaderProgram;
    protected VAORendering vaoRendering;

    private Matrix4f viewMatrix = new Matrix4f();
    private Vector3f fontColor = new Vector3f(1, 1, 1);
    private Matrix4f modelMatrix = new Matrix4f();

    private MSDFTextureLoader msdfTextureLoader;
    private TextMeshBuilder textMeshBuilder;
    private Vector2f pos = new Vector2f(100, 100);
    private int size = 32;

    TextRenderer() {
        this.shaderProgram = new ShaderProgram();
        this.shaderProgram.createVertexShader(Location.fromResource("shader/msdf/VertexShader.vsh"));
        this.shaderProgram.createFragmentShader(Location.fromResource("shader/msdf/FragmentShader.fsh"));
        this.shaderProgram.link();

        this.vaoRendering = new VAORendering();
    }

    public static TextRenderer createTextRender() {
        return new TextRenderer();
    }

    public TextRenderer msdfTextureLoader(MSDFTextureLoader msdfTextureLoader) {
        this.msdfTextureLoader = msdfTextureLoader;
        return this;
    }

    public TextRenderer textMeshBuilder(TextMeshBuilder textMeshBuilder) {
        this.textMeshBuilder = textMeshBuilder;
        return this;
    }

    public TextRenderer pos(Vector2f pos) {
        this.pos = pos;
        return this;
    }

    public TextRenderer size(int size) {
        this.size = size;
        return this;
    }

    public TextRenderer init() {
        return this;
    }

    public TextRenderer draw(String text) {
        shaderProgram.bind();

        shaderProgram.setUniform("projectionMatrix", UploadUniformType.ON_CHANGE, Core.projection2D.getProjMatrix());
        shaderProgram.setUniform("viewMatrix", UploadUniformType.PER_FRAME, viewMatrix);
        shaderProgram.setUniform("uFontAtlas", UploadUniformType.ONCE, 0);
        shaderProgram.setUniform("uFontColor", UploadUniformType.ON_CHANGE, fontColor);
        shaderProgram.setUniform("uDistanceRange", UploadUniformType.ONCE, (float) textMeshBuilder.getMsdfFont().getAtlas().getDistanceRange());

        GLStateCache.enable(GL_BLEND);
        GLStateCache.blendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        GLStateCache.enable(GL_TEXTURE_2D);
        GLStateCache.activeTexture(GL_TEXTURE0);
        GLStateCache.bindTexture(GL_TEXTURE_2D, msdfTextureLoader.textureId);

        float cursorX = pos.x();
        float cursorY = pos.y();
        for (int i = 0; i < text.length(); i++) {
            int charCode = text.codePointAt(i);

            MSDFFont.Glyph glyph = textMeshBuilder.getGlyphMap().get(charCode);
            if (glyph == null) {
                continue;
            }

            float advance = (float) glyph.getAdvance();
            if (glyph.getPlaneBounds() == null || glyph.getAtlasBounds() == null) {
                cursorX += advance * size;
                continue;
            }

            TextMeshBuilder.TextMesh textMesh = textMeshBuilder.getTextMeshMap().get(charCode);
            if (textMesh == null) {
                DebugLog.error(getClass(), "Code point " + charCode + " is not generated by " + TextMeshBuilder.class.getSimpleName());
                continue;
            }

            shaderProgram.setUniform("modelMatrix", UploadUniformType.PER_FRAME, modelMatrix.translate(cursorX, cursorY, 0).scale(size, size, 1));
            vaoRendering.draw(textMesh.mesh, GL_TRIANGLES);

            cursorX += advance * size;
            modelMatrix.identity();
        }

        shaderProgram.unbind();

        return this;
    }

    public Matrix4f getViewMatrix() {
        return viewMatrix;
    }

    public void setViewMatrix(Matrix4f viewMatrix) {
        this.viewMatrix = viewMatrix;
    }

    public Vector3f getFontColor() {
        return fontColor;
    }

    public void setFontColor(Vector3f fontColor) {
        this.fontColor = fontColor;
    }

    public Matrix4f getModelMatrix() {
        return modelMatrix;
    }

    public void setModelMatrix(Matrix4f modelMatrix) {
        this.modelMatrix = modelMatrix;
    }

    public MSDFTextureLoader getMsdfTextureLoader() {
        return msdfTextureLoader;
    }

    public void setMsdfTextureLoader(MSDFTextureLoader msdfTextureLoader) {
        this.msdfTextureLoader = msdfTextureLoader;
    }

    public TextMeshBuilder getTextMeshBuilder() {
        return textMeshBuilder;
    }

    public void setTextMeshBuilder(TextMeshBuilder textMeshBuilder) {
        this.textMeshBuilder = textMeshBuilder;
    }

    public Vector2f getPos() {
        return pos;
    }

    public void setPos(Vector2f pos) {
        this.pos = pos;
    }

    public int getSize() {
        return size;
    }

    public void setSize(int size) {
        this.size = size;
    }
}
